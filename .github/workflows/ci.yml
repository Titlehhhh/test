name: CI
on: [push]

jobs:
  x86_64-build-and-test:
    name: Build and test (x86_64, ${{ matrix.os }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        compiler: [gcc, clang]
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.compiler }}
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm libz-dev valgrind
    - run: sudo sysctl kernel.randomize_va_space=0 # https://bugs.launchpad.net/ubuntu/+source/llvm-toolchain-14/+bug/2048768
    - run: chmod +x scripts/run_tests.sh
    - run: chmod +x scripts/cmake-helper.sh
    - run: chmod +x scripts/gzip_tests.sh
    - run: chmod +x scripts/gen-release-archives.sh
    - run: sudo ./scripts/run_tests.sh
    - name: Direct compilation without official build system
      run: $CC -O2 -Wall -Werror lib/*{,/*}.c programs/{gzip,prog_util,tgetopt}.c -o libdeflate-gzip
    - name: LS
      run: ls

  other-arch-build-and-test:
    name: Build and test (${{ matrix.arch }}, ${{ matrix.distro }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        include:
        - { arch: armv6, distro: bullseye, compiler: gcc }
        - { arch: armv6, distro: bullseye, compiler: clang }
        - { arch: armv7, distro: bullseye, compiler: gcc }
        - { arch: armv7, distro: bullseye, compiler: clang }
        - { arch: aarch64, distro: bullseye, compiler: gcc }
        - { arch: aarch64, distro: bullseye, compiler: clang }
        - { arch: s390x, distro: bullseye, compiler: gcc }
        - { arch: s390x, distro: bullseye, compiler: clang }
        - { arch: ppc64le, distro: bullseye, compiler: gcc }
        - { arch: ppc64le, distro: bullseye, compiler: clang }
        - { arch: riscv64, distro: ubuntu_latest, compiler: gcc }
        - { arch: riscv64, distro: ubuntu_latest, compiler: clang }
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2.5.0
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y build-essential cmake clang llvm libz-dev
          run: |
            chmod +x scripts/run_tests.sh
            chmod +x scripts/cmake-helper.sh
            chmod +x scripts/gzip_tests.sh
            chmod +x scripts/gen-release-archives.sh
            tests=(regular)
            if [ ${{matrix.compiler}} = clang ]; then
                tests+=(ubsan)
            fi
            CC=${{matrix.compiler}} scripts/run_tests.sh "${tests[@]}"

  macos-build-and-test:
    name: Build and test (macOS)
    runs-on: macos-latest
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v4
    - run: cmake -B build -DLIBDEFLATE_BUILD_TESTS=1
    - run: cmake --build build --verbose
    - run: DESTDIR=build/install cmake --install build --verbose
    - run: ctest --test-dir build
    - name: Direct compilation without official build system
      run: cc -O2 -Wall -Werror lib/*{,/*}.c programs/{gzip,prog_util,tgetopt}.c -o libdeflate-gzip


  windows-visualstudio-build-and-test:
    name: Build and test (Windows, ${{matrix.gen}}, ${{matrix.toolset}}, ${{matrix.vs}})
    strategy:
      matrix:
        include:
        - {os: windows-2022, gen: "Visual Studio 17 2022", toolset: ClangCL, vs: x64,   vcpkg: x64-windows}
        - {os: windows-2022, gen: "Visual Studio 17 2022", toolset: ClangCL, vs: Win32, vcpkg: x86-windows}
        - {os: windows-2022, gen: "Visual Studio 17 2022", toolset: ClangCL, vs: arm64, vcpkg: arm64-windows}

    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v4
    - uses: microsoft/setup-msbuild@v2
    - run: vcpkg install zlib:${{matrix.vcpkg}}
    - run: >
        echo C:\vcpkg\packages\zlib_${{matrix.vcpkg}}\bin
        | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    # Note: as per the CMake documentation, DESTDIR is unsupported on Windows.
    - run: >
        cmake -B build -G "${{matrix.gen}}" -T ${{matrix.toolset}}
        -A ${{matrix.vs}} -DLIBDEFLATE_BUILD_TESTS=1
        -DCMAKE_C_FLAGS="/W4 /WX /DLIBDEFLATE_ENABLE_ASSERTIONS"
        -DZLIB_LIBRARY=C:\vcpkg\packages\zlib_${{matrix.vcpkg}}\lib\zlib.lib
        -DZLIB_INCLUDE_DIR=C:\vcpkg\packages\zlib_${{matrix.vcpkg}}\include
        -DCMAKE_INSTALL_PREFIX=build\install
    - run: cmake --build build --verbose --config Debug
    - run: cmake --install build --verbose --config Debug
    - run: ctest --test-dir build -C Debug

  cross-compile-for-windows:
    name: Cross compile for Windows
    runs-on: ubuntu-latest
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 libz-mingw-w64-dev
    # Unfortunately Ubuntu doesn't have {i686,x86_64}-w64-mingw32-cmake like
    # some distros have, so we have to provide our own toolchain files here.
    - name: 32-bit build
      run: |
        chmod +x scripts/cmake-helper.sh
        scripts/cmake-helper.sh -DLIBDEFLATE_BUILD_TESTS=1 \
            -DCMAKE_TOOLCHAIN_FILE=scripts/toolchain-i686-w64-mingw32.cmake
        cmake --build build --verbose
        DESTDIR=build/install cmake --install build --verbose
    - name: 64-bit build
      run: |
        chmod +x scripts/cmake-helper.sh
        scripts/cmake-helper.sh -DLIBDEFLATE_BUILD_TESTS=1 \
            -DCMAKE_TOOLCHAIN_FILE=scripts/toolchain-x86_64-w64-mingw32.cmake
        cmake --build build --verbose
        DESTDIR=build/install cmake --install build --verbose

